@startuml CommandInternalSequenceDiagram

title Commands - Intenal Sequence Diagram

actor User
participant GameFrame
participant GameManager
participant Game
participant Player
participant Enemy
participant Wall
participant Item

activate GameFrame
User -> GameFrame : submit a valid command

activate GameManager
GameFrame -> GameManager : nextMove(<command>)
activate Game
GameManager -> Game : nextMove(<command>)

Game -> Game : playerMove()

activate Player
alt <command> is "<direction>"
    Game -> Player : changeDirection(<direction>)
else <command> is "cross <direction>"
    Game -> Player : crossDoor(<direction>)
else <command> is "look"
    activate Wall
    Game -> Wall : getItems()
else <command> is "take <item>"
    Game -> Wall : removeItem(<item>)
    Game -> Player : insertItem(<item>)
deactivate Wall
else <command> is "use <item>"
    activate Item
    alt <item> is a Key, a Note or a ClueItem
        Game -> Item : getUsingMessage()
    else <item> is a Healing Item
        Game -> Player : increaseHealth() and removeItem(<item>)
    else <item> is a Hiding Item
        Game -> Player : setHidden()
    else <item> is a Hider Item
        Game -> Item : reveal()
    else <item> is Item Container
        alt <item> is locked
            Game -> Item : unlock()
        else <item> is unlocked
            Game -> Item : getItem()
        end
    deactivate Item
    end
else <command> is "status"
    Game -> Player : getHealth() and getInventory()
else <command> is "inventory"
    Game -> Player : getInventory()
end

Game -> Game : enemyMove()
alt player is in the same room as the enemy
    activate Enemy
    Game -> Player: decreaseHealth()
else player is not in the same room as the enemy
    Game -> Enemy : move()
    deactivate Enemy
end

Game -> GameManager : return a string with the message to display
deactivate Game
GameManager -> GameFrame : return updated game state
deactivate GameManager
GameFrame -> User : display updated game state
deactivate GameFrame

@enduml
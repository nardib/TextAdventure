@startuml DesignClassModel

    class Player {
        -health : int
        -score : int
        -arrayIndexCount : int
        -weightCount : int
        -inventory : Item[]
        -currentuDirection : Direction

        +Player()
        +decreaseHealth()
        +increaseHealth()
        +getHealth()
        +getInventory()
        +insertItem()
        +removeItem()
        +crossDoor()
        +changeDirection()
        +getCurrentDirection()
    }

    class GameMemento{
        GameMemento()
        +getPlayer()
        +getMap()
        +getEnemy()
        +getGameIsOn()
    }

    enum Gender {
        MALE
        FEMALE
        NEUTRAL
    }
    enum Direction {
        NORTH
        SOUTH
        EAST
        WEST
    }
    class Enemy{
        -rooms : boolean[];

        +move()
        +Enemy()
    }
    class GameFrame {
        x : int
        y : int
        +GameFrame()
    }
    class Game {
        -player : Player
        -map : Map
        -enemy : Enemy
        -gameIsOn : boolean
        -mementos : ArrayList

        +Game()
       
        +nextmove()
        +isGameOver()
        +getPlayer()
        +getMap()
        +getEnemy()
        +undo()
        -saveCurrentState()
        -playerTurn()
        -enemyTurn()
    }
    class Main {
        +main()
    }
    class Item{
        #icon : ImageIcon
        #weight : int
        #weight : int
        #pickable : boolean
        #currentRoom : int

        +Item()
        +getIcon()
        +getWeight()
        +getRoom()
        +getName()
        +isPickable()
    }

    class Hammer{
        +Hammer()
    }

    class HidingItem{
        +HidingItem()
    }

    class HealingItem{
        -healthPoints : int

        +getHealthPoints()
        +HealingItem()
    }

    class Notes {
        -message : String

        +Notes()
        +getMessage()
    }

    class Key {
        -id : int

        +Key()
        +getId()
    }

    class Lock{
        -id : int
        -locked : boolean

        +Lock()
        +getId()
        +isLocked()
        +unlock()
    }

    class Map {
        -walls : BufferedImage[]
        -DoorWall : Wall[]
        -PlainWall : Wall[]
        -rooms : Room[]

        +Map()
        +getRoom()
    }
    class Room {
        -roomNumber : int
        -name : String
        -NWall : Wall
        -SWall : Wall
        -EWall : Wall
        -WWall : Wall
        -crossableNorth : boolean
        -crossableSouth : boolean
        -crossableEast : boolean
        -crossableWest : boolean
        -Walls : Wall[]

        +Room()
        +getName()
        +getRoomNumber()
        +getDoors()
        +addPassageWay()
        +getNWall()
        +getSWall()
        +getEWall()
        +getWWall()
        +setNwall()
        +setSWall()
        +setEWall()
        +setWWall()
        +getCrossableNorth()
        +getCrossableSouth()
        +getCrossableEast()
        +getCrossableWest()
    }
    
    class Character {
        #name : String
        #gender : Gender
        #currentRoom : int

        +Character()
        +getName()
        +getGender()
        +getCurrentRoom()
        +setCurrentRoom()
        +setName()
        +setGender()
    }

    class Wall
    {
        -wall : BufferedImage
        -hasDoor : boolean
        -items : HashMap
        -combined : BufferedImage
        
        +Wall()
        +addItem()
        +hasDoor()
        +removeItem()
        +getCombinedImage()
        +setDoor()
        -deepCopy()
        -drawItems()
    }

    Player ..|> Gender
    Map ..o Room
    Room ..o Wall
    Player ..|> Item
    Player ..|> Direction
    Key --|> Item
    Lock --|> Item
    HealingItem --|> Item
    Hammer --|> Item
    HidingItem --|> Item
    Notes --|> Item
    Enemy ..|> Gender
    Character <|-- Player
    Character <|-- Enemy
    Player --o Game
    Map --o Game
    Enemy --o Game
    GameMemento --* Game
    Game --o GameFrame
    GameFrame <|-- Main

@enduml
